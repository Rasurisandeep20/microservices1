package com.dnb.accountservice.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.dnb.accountservice.dto.Account;
import com.dnb.accountservice.dto.Customer;
import com.dnb.accountservice.exception.IdNotFoundException;
import com.dnb.accountservice.repo.AccountRepository;

@Service("accountServiceImpl")
public class AccountServiceImpl implements AccountService {

	@Autowired // type, name
	private AccountRepository accountRepository;
	
@Autowired
private ApiClient apiclient;
//private RestTemplate restTemplate;
	
	
//	@Value("${api.customer}")
//	private String URL;
	@Override
	public Account createAccount(Account account) throws IdNotFoundException{
//		System.out.println(URL);
//		try {
//			ResponseEntity<Customer> responseEntity = restTemplate.getForEntity(URL+"/" + account.getCustomerId() ,Customer.class);
//			Customer customer = responseEntity.getBody();
//			System.out.println(customer);		
//		}
//		catch(Exception e) {		
//			System.out.println(e.getMessage());
//			throw new IdNotFoundException("Id not found Exception");
//		}
		try {
			Customer customer = apiclient.getCustomerById(account.getCustomerId());
			return accountRepository.save(account);
		}
		catch(Exception e) {
			System.out.println(e.getMessage());
			throw new IdNotFoundException("Id not found");
		}
		
	}

 

	@Override
	public Optional<Account> getAccountById(String accountId) {
		// TODO Auto-generated method stub
		return accountRepository.findById(accountId);
	}

	public boolean deleteAccountByID(String accountId) throws IdNotFoundException {
		// TODO Auto-generated method stub
		boolean isPresent = accountRepository.existsById(accountId);
		if (isPresent) {
			accountRepository.deleteById(accountId);
		} else {
			throw new IdNotFoundException("Id not Found Exception");
		}
		if (accountRepository.existsById(accountId))
			return false;
		else
			return true;
	}

	public Iterable<Account> getAllAccounts() {
		return accountRepository.findAll();
	}

	@Override

	public boolean checkAccountId(String accountId) {

		if (accountRepository.existsById(accountId))

			return true;

		else

			return false;
	}

	@Override

	public List<Account> getAccountByContactNumber(String contactNumber) {

		// TODO Auto-generated method stub

		return accountRepository.findByContactNumber(contactNumber);

	}

}